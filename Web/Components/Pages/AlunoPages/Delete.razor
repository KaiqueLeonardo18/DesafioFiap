@page "/alunos/delete"
@using Domain.Entities
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Aluno</h4>
    <hr />
    @if (aluno is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Nome</dt>
            <dd class="col-sm-10">@aluno.Nome</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Usuario</dt>
            <dd class="col-sm-10">@aluno.Usuario</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">senha</dt>
            <dd class="col-sm-10">@aluno.senha</dd>
        </dl>
        <EditForm method="post" Model="aluno" OnValidSubmit="DeleteAluno" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(aluno is null)">Delete</button> |
            <a href="/alunos">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Domain.Entities.Aluno? aluno;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // aluno = await DB.Aluno.FirstOrDefaultAsync(m => m.Id == Id);

        if (aluno is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteAluno()
    {
        // DB.Aluno.Remove(aluno!);
        // await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/alunos");
    }
}
